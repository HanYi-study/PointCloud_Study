import cv2  # cv2 是 OpenCV，用于图像读取、颜色空间转换、保存等；
import os
import numpy as np

'''
这段代码的作用是读取一批图像文件，并将图像中的指定颜色像素替换为对应的标签值（以 RGB 三通道形式存储，如 (1,1,1)）
然后将处理后的图像重新保存。主要用于图像语义分割或二维码识别类任务中，将“颜色标签图”转换为“灰度标签图”。

'''

# color:            QR(1):128 0 0  MINIQR(2):0 128 0  DM(3):128 128 0  PDF(4):0 0 128
# 上面这行注释说明了图像中几种颜色对应的标签类别：
# 红色 (128, 0, 0) → 类别 1 (QR)
# 绿色 (0, 128, 0) → 类别 2 (MINI QR)
# 黄色 (128, 128, 0) → 类别 3 (DM)
# 蓝色 (0, 0, 128) → 类别 4 (PDF)
img_path = 'D:\python'  # 这是待处理图像的输入路径
out_img = 'D:\python'   # 这是处理后图像的输出路径


# 使用 NumPy 向量化方式进行颜色判断和替换
for im_name in os.listdir(img_path):  # 遍历 img_path 目录中的所有文件（假设都是图像文件）。
    im = cv2.imread(img_path + im_name)  # 用 OpenCV 读取图像（默认是 BGR 通道顺序）。
    im = cv2.cvtColor(im, cv2.COLOR_BGR2RGB)  # 将图像从 BGR 转换为 RGB，使得后续颜色判断更直观。
    im[np.all(im == (128, 0, 0), axis=-1)] = (1, 1, 1)
    im[np.all(im == (0, 128, 0), axis=-1)] = (2, 2, 2)
    im[np.all(im == (128, 128, 0), axis=-1)] = (3, 3, 3)
    im[np.all(im == (0, 0, 128), axis=-1)] = (4, 4, 4)
    # 将图像中所有颜色为某一特定值的像素替换为对应的标签值 (n, n, n)。
    # np.all(im == (R,G,B), axis=-1) 返回布尔 mask，表示哪些像素符合该颜色。
    # 替换结果仍保留 RGB 三通道格式，值相同（如 (1,1,1)）表示类 1。
    name, ext = os.path.splitext(im_name)
    new_name = f"{name}_labeled{ext}"
    cv2.imwrite(os.path.join(out_img, new_name), im)
    # 将处理好的图像写入目标路径，文件名不变。
    # 输出后的图带有后缀_labeled，表示生成的是标注完成的图

'''
输入：
格式：
  所有文件必须是图像格式（如 .png, .jpg 等）；
  每张图像是 三通道彩色图像（RGB）；
  图像中使用以下颜色代表不同类别：
  | 类别编号 | 类别名称     | RGB颜色  |
  | ---- | --------  | ------------- |
  | 1    | QR码      | (128, 0, 0)   |
  | 2    | MINI QR码 | (0, 128, 0)   |
  | 3    | DM码      | (128, 128, 0) |
  | 4    | PDF417码  | (0, 0, 128)   |
输出：
格式：
  每张图像仍是 .png 或 .jpg 等彩色格式；
  但每个像素值变成了**(n, n, n)** 的形式，如：
  | 原始颜色 (RGB)    | 替换后值 (RGB) | 语义类别 |
  | ------------- | ---------- | -----------    |
  | (128, 0, 0)   | (1, 1, 1)  | QR码（类1）    |
  | (0, 128, 0)   | (2, 2, 2)  | MINI QR（类2） |
  | (128, 128, 0) | (3, 3, 3)  | DM码（类3）    |
  | (0, 0, 128)   | (4, 4, 4)  | PDF417（类4）  |

举例说明：
假设 img_path 中有一个图像：
📄 img_path/image1.png
  它原本有红色和绿色区域表示 QR 与 MINI QR。

脚本执行后会在同目录下生成：
📄 out_img/image1.png

颜色将变成：
  红色区域变为 (1,1,1)
  绿色区域变为 (2,2,2)
  其余颜色不变或未被替换

'''