'''
该脚本的作用是：
  根据给定的点云坐标（xyzs）和标签（labels），生成一份带有 RGB 和 label 的 .ply 点云文件，然后通过 Open3D 加载并可视化该 .ply 文件。

'''

import open3d as o3d
import numpy as np
import os

# 标签颜色映射表，可自定义
RGBS = [
    (0, 255, 255),   # 类别 0
    (255, 0, 0),     # 类别 1
    (0, 255, 0),     # 类别 2
    (0, 0, 255),     # 类别 3
    (0, 0, 0),       # 类别 4
    (255, 0, 255)    # 类别 5
]


def make_ply_file(xyzs, labels, save_path):
    '''将 xyz + label 输出为含 RGB 的 .ply 文件'''
    with open(save_path, 'w') as f:
        f.write('ply\n')
        f.write('format ascii 1.0\n')
        f.write('comment Generated by make_ply_file\n')
        f.write('element vertex {}\n'.format(len(xyzs)))
        f.write('property float64 x\n')
        f.write('property float64 y\n')
        f.write('property float64 z\n')
        f.write('property int16 red\n')
        f.write('property int16 green\n')
        f.write('property int16 blue\n')
        f.write('property int8 label\n')
        f.write('end_header\n')

        for i in range(len(xyzs)):
            x, y, z = xyzs[i]
            label = int(labels[i])
            r, g, b = RGBS[label % len(RGBS)]  # 防止越界
            f.write(f'{x} {y} {z} {r} {g} {b} {label}\n')


def main():
    print("=== 点云 .ply 生成器 ===")
    print("标签的类别数量，以及标签颜色映射表若有修改需要，建议在源代码中修改")
    print("请选择输入方式：")
    print("1 - 从已有的 .ply 文件读取（提取 xyz、label）")
    print("2 - 随机生成点云数据（用于测试）")
    mode = input("输入 1 或 2：").strip()

    if mode == '1':
        input_path = input("请输入 .ply 文件路径（必须包含 label 字段）：\n> ").strip()
        if not os.path.exists(input_path):
            print("❌ 输入路径无效，程序终止。")
            return

        print("读取中...")
        ply = o3d.io.read_point_cloud(input_path)
        if not ply.has_points():
            print("❌ 文件中无点数据，程序终止。")
            return

        # 使用自定义 ply 解析（需含 label 字段）
        from utils.ply import read_ply  # 确保有此模块
        data = read_ply(input_path)
        xyzs = np.vstack((data['x'], data['y'], data['z'])).T
        labels = data['label'] if 'label' in data.dtype.names else data['class']

        # 自动生成输出路径
        base_name = os.path.basename(input_path)
        name_no_ext = os.path.splitext(base_name)[0]
        output_path = os.path.join(os.path.dirname(input_path), name_no_ext + "_labeled.ply")

    else:
        # 用户交互输入点数与类别数
        numpoints = int(input("请输入点云点数（如 2000）：\n> ").strip())
        num_classes = int(input("请输入标签种类数量（如 4）：\n> ").strip())
        xyzs = np.random.rand(numpoints, 3)
        labels = np.random.randint(0, num_classes, numpoints)
        output_path = input("请输入保存输出的文件名（如 output.ply）：\n> ").strip()

    # 写入 .ply 文件
    make_ply_file(xyzs, labels, output_path)
    print(f"✅ 已保存带标签点云至：{output_path}")

    # 是否可视化
    show = input("是否可视化输出点云？(y/n)：\n> ").strip().lower()
    if show == 'y':
        pcd = o3d.io.read_point_cloud(output_path)
        o3d.visualization.draw_geometries([pcd])


if __name__ == "__main__":
    main()
